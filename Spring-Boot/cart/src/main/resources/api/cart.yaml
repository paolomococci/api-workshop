openapi: "3.0.3"
info:
  version: 0.0.1-SNAPSHOT
  title: Cart
  license:
    name: MIT
servers:
  - url: http://localhost:8080/

tags:
  - name: cart
    description: everything about carts
  - name: order
    description: operation about orders
  - name: user
    description: operations about users
  - name: customer
    description: operations about customers
  - name: address
    description: operations about addresses
  - name: payment
    description: operations about payments
  - name: shipping
    description: operations about shippings
  - name: product
    description: operations about products


paths:
  /api/v1/carts/{customerId}:
    get:
      tags:
        - cart
      summary: returns the shopping cart
      description: returns the shopping cart of given customer
      operationId: getCartByCustomerId
      parameters:
        - name: customerId
          in: path
          description: customer identifier
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'
        404:
          description: given customer ID doesn't exist
          content: {}
    delete:
      tags:
        - cart
      summary: delete the shopping cart
      description: deletes the shopping cart of given customer
      operationId: deleteCart
      parameters:
        - name: customerId
          in: path
          description: customer identifier
          required: true
          schema:
            type: string
      responses:
        204:
          description: successful operation
        404:
          description: given customer ID doesn't exist
          content: {}
  /api/v1/carts/{customerId}/items:
    get:
      tags:
        - cart
      summary: returns the list of products in customer's shopping cart
      description: returns the items in shopping cart of given customer
      operationId: getCartItemsByCustomerId
      parameters:
        - name: customerId
          in: path
          description: customer identifier
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        404:
          description: given customer ID doesn't exist
          content: {}
    post:
      tags:
        - cart
      summary: adds an item in shopping cart
      description: adds an item to the shopping cart if it doesn't already exist or increment quantity by the specified number of items if it does
      operationId: addCartItemsByCustomerId
      parameters:
        - name: customerId
          in: path
          description: customer identifier
          required: true
          schema:
            type: string
      requestBody:
        description: item object
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Item'
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        201:
          description: item added successfully
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        404:
          description: given customer ID doesn't exist
          content: {}
    put:
      tags:
        - cart
      summary: replace or add an item in shopping cart
      description: adds an item to the shopping cart if it doesn't already exist or replace with given item if it does
      operationId: addOrReplaceItemsByCustomerId
      parameters:
        - name: customerId
          in: path
          description: customer identifier
          required: true
          schema:
            type: string
      requestBody:
        description: item object
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Item'
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        201:
          description: item added successfully
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        404:
          description: given customer ID doesn't exist
          content: {}
  /api/v1/carts/{customerId}/items/{itemId}:
    get:
      tags:
        - cart
      summary: returns given item from user's shopping cart
      description: returns given item from shopping cart of given customer
      operationId: getCartItemsByItemId
      parameters:
        - name: customerId
          in: path
          description: customer identifier
          required: true
          schema:
            type: string
        - name: itemId
          in: path
          description: item Identifier
          required: true
          schema:
            type: string
      responses:
        200:
          description: if item exists in cart
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        404:
          description: given item ID doesn't exist
          content: {}
    delete:
      tags:
        - cart
      summary: delete the item from shopping cart
      description: deletes the item from shopping cart of given customer
      operationId: deleteItemFromCart
      parameters:
        - name: customerId
          in: path
          description: customer identifier
          required: true
          schema:
            type: string
        - name: itemId
          in: path
          description: item Identifier
          required: true
          schema:
            type: string
      responses:
        202:
          description: accepts the request regardless of whether the specified item exists in the cart or not
  /api/v1/orders:
    post:
      tags:
        - order
      summary:  creates a new order for the given order request
      description: creates a new order for the given order request
      operationId: addOrder
      requestBody:
        description: new order request object
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/NewOrder'
          application/json:
            schema:
              $ref: '#/components/schemas/NewOrder'
      responses:
        201:
          description: order added successfully
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        406:
          description: if payment is not authorized
          content: {}
    get:
      tags:
        - order
      summary: returns the orders of given user
      description: returns orders of given user
      operationId: getOrdersByCustomerId
      parameters:
        - name: customerId
          in: query
          description: customer identifier
          required: true
          schema:
            type: string
      responses:
        200:
          description: if order exists
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        404:
          description: order doesn't exist for given user
          content: {}
  /api/v1/orders/{id}:
    get:
      tags:
        - order
      summary: returns the order of given order ID
      description: returns orders of given order ID
      operationId: getOrdersByOrderId
      parameters:
        - name: id
          in: path
          description: order identifier
          required: true
          schema:
            type: string
      responses:
        200:
          description: if order exists
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        404:
          description: order doesn't exist for given user
          content: {}
  /api/v1/customers:
    get:
      tags:
        - customer
      summary: returns all customers
      description: returns all customers or empty collection if no use found
      operationId: getAllCustomers
      responses:
        200:
          description: for successful fetch
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /api/v1/customers/{id}:
    get:
      tags:
        - customer
      summary: returns a customer
      description: returns a customers identifiable by given ID
      operationId: getCustomerById
      parameters:
        - name: id
          in: path
          description: customer identifier
          required: true
          schema:
            type: string
      responses:
        200:
          description: for successful fetch
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags:
        - customer
      summary: deletes the customer
      description: deletes the customer identifiable by given ID
      operationId: deleteCustomerById
      parameters:
        - name: id
          in: path
          description: customer identifier
          required: true
          schema:
            type: string
      responses:
        202:
          description: request accepted returns this status even if user does not exist
          content: {}
  /api/v1/customers/{id}/cards:
    get:
      tags:
        - customer
      summary: returns all customer's cards
      description: returns all customer's cards based on given customer ID
      operationId: getCardsByCustomerId
      parameters:
        - name: id
          in: path
          description: customer identifier
          required: true
          schema:
            type: string
      responses:
        200:
          description: for successful fetch
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Card'
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
  /api/v1/customers/{id}/addresses:
    get:
      tags:
        - customer
      summary: returns all customer's addresses
      description: returns all customer's addresses based on given customer ID
      operationId: getAddressesByCustomerId
      parameters:
        - name: id
          in: path
          description: customer identifier
          required: true
          schema:
            type: string
      responses:
        200:
          description: for successful fetch
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Address'
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
  /api/v1/addresses:
    get:
      tags:
        - address
      summary: returns all user's addresses
      description: returns all user's addresses else empty collection
      operationId: getAllAddresses
      responses:
        200:
          description: for successful fetch
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
    post:
      tags:
        - address
      summary: creates a new user addresses
      description: create a new user address only if the address does not already exist
      operationId: createAddress
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/AddAddressReq'
          application/json:
            schema:
              $ref: '#/components/schemas/AddAddressReq'
      responses:
        200:
          description: for successful fetch
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Address'
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
  /api/v1/addresses/{id}:
    get:
      tags:
        - address
      summary: returns user's address
      description: returns user's address based on given address ID
      operationId: getAddressesById
      parameters:
        - name: id
          in: path
          description: address Identifier
          required: true
          schema:
            type: string
      responses:
        200:
          description: for successful fetch
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Address'
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
    delete:
      tags:
        - address
      summary: deletes user's address
      description: deletes user's address based on given address ID
      operationId: deleteAddressesById
      parameters:
        - name: id
          in: path
          description: address identifier
          required: true
          schema:
            type: string
      responses:
        202:
          description: accepts the deletion request and perform deletion
          content: {}
  /api/v1/cards:
    get:
      tags:
        - card
      summary: returns all user's cards
      description: returns all user's cards or an empty collection
      operationId: getAllCards
      responses:
        200:
          description: for successful fetch
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Card'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Card'
    post:
      tags:
        - card
      summary: creates a new user addresses
      description: creates a new user addresses or does nothing if address already exists
      operationId: registerCard
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/AddCardReq'
          application/json:
            schema:
              $ref: '#/components/schemas/AddCardReq'
      responses:
        200:
          description: for successful fetch
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Address'
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
  /api/v1/cards/{id}:
    get:
      tags:
        - card
      summary: returns user's card
      description: returns user's card based on given card ID
      operationId: getCardById
      parameters:
        - name: id
          in: path
          description: card identifier
          required: true
          schema:
            type: string
      responses:
        200:
          description: for successful fetch
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Card'
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
    delete:
      tags:
        - card
      summary: deletes card's address
      description: deletes card's address based on given card ID
      operationId: deleteCardById
      parameters:
        - name: id
          in: path
          description: card identifier
          required: true
          schema:
            type: string
      responses:
        202:
          description: accepts the deletion request and perform deletion
          content: {}
  /api/v1/payments:
    post:
      tags:
        - payment
      summary: authorize a payment request
      description: authorize a payment request
      operationId: authorize
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/PaymentReq'
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentReq'
      responses:
        200:
          description: for successful fetch
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Authorization'
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'
    get:
      tags:
        - payment
      summary: returns the payment authorization
      description: return the payment authorization for the specified order
      operationId: getOrdersPaymentAuthorization
      parameters:
        - name: id
          in: query
          description: order identifier
          required: true
          schema:
            type: string
      responses:
        200:
          description: for successful fetch
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Authorization'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Authorization'
  /api/v1/shipments:
    post:
      tags:
        - shipping
      summary: ship the specified shipping request
      description: ship the specified shipping request
      operationId: shipOrder
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/ShippingReq'
          application/json:
            schema:
              $ref: '#/components/schemas/ShippingReq'
      responses:
        200:
          description: for successful fetch
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Authorization'
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'
    get:
      tags:
        - shipping
      summary: return the shipment
      description: return the Shipment for the specified order
      operationId: getShipmentByOrderId
      parameters:
        - name: id
          in: query
          description: order identifier
          required: true
          schema:
            type: string
      responses:
        200:
          description: for successful fetch
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Shipment'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Shipment'
  /api/v1/products:
    get:
      tags:
        - product
      summary: returns all the matched products
      description: returns the products that matches the given query criteria
      operationId: queryProducts
      parameters:
        - name: tag
          in: query
          description: product tag
          required: false
          schema:
            type: string
        - name: name
          in: query
          description: product name
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: query page number
          required: false
          schema:
            type: integer
            format: int32
            default: 1
        - name: size
          in: query
          description: query page size
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        200:
          description: for successful fetch
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
  /api/v1/products/{id}:
    get:
      tags:
        - product
      summary: returns a product
      description: returns the product that matches the given product ID
      operationId: getProduct
      parameters:
        - name: id
          in: path
          description: product identifier
          required: true
          schema:
            type: string
      responses:
        200:
          description: for successful fetch
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
components:
  schemas:
    Cart:
      description: shopping cart of the user
      type: object
      properties:
        customerId:
          description: ID of the customer who possesses the cart
          type: string
        items:
          description: collection of items in cart
          type: array
          items:
            $ref: '#/components/schemas/Item'
    Item:
      description: items in shopping cart
      type: object
      properties:
        id:
          description: item identifier
          type: string
        quantity:
          description: the item quantity
          type: integer
          format: int32
        unitPrice:
          description: the item's price per unit
          type: number
          format: double
    Order:
      description: represents an order
      type: object
      properties:
        id:
          description: order identifier
          type: string
        customer:
          $ref: '#/components/schemas/User'
        address:
          $ref: '#/components/schemas/Address'
        card:
          $ref: '#/components/schemas/Card'
        date:
          description: order's data and time details
          type: string
          format: date-time
        items:
          description: collection of order items
          type: array
          items:
            $ref: '#/components/schemas/Item'
        total:
          description: order total
          type: number
          format: double
        payment:
          $ref: '#/components/schemas/Payment'
        shipment:
          $ref: '#/components/schemas/Shipment'
        status:
          description: order status
          type: string
          enum:
            - CREATED
            - PAID
            - SHIPPED
            - PAYMENT_FAILED
            - SHIPMENT_FAILED
            - COMPLETED
      xml:
        name: Order
    AddAddressReq:
      allOf:
        - $ref: '#/components/schemas/Address'
        - type: object
          properties:
            userId:
              type: string

      xml:
        name: AddAddressReq
    Address:
      type: object
      properties:
        number:
          description: house of flat number
          type: string
        residency:
          description: society or building name
          type: string
        street:
          description: street name
          type: string
        city:
          description: city name
          type: string
        state:
          description: state name
          type: string
        country:
          description: country name
          type: string
        pincode:
          description: postal code
          type: string
      xml:
        name: Address
    Card:
      type: object
      properties:
        cardNumber:
          description: card number
          type: string
        expires:
          description: expiration date
          type: string
        ccv:
          description: ccv code
          type: string
      xml:
        name: Card
    AddCardReq:
      description: request object for new card registration
      allOf:
        - $ref: '#/components/schemas/Card'
        - type: object
          properties:
            userId:
              type: object
      xml:
        name: AddCardReq
    Payment:
      type: object
      properties:
        authorized:
          description: flag that specified whether payment is authorized or not
          type: boolean
        message:
          description: approval or rejection message
          type: string
      xml:
        name: Payment
    Shipment:
      type: object
      properties:
        orderId:
          description: order identifier
          type: string
        carrier:
          description: shipping carrier
          type: string
        trackingNumber:
          description: shipping tracking number
          type: string
        estDeliveryDate:
          description: estimated delivery date
          type: string
          format: date
      xml:
        name: Shipment
    ShippingReq:
      description: contains information required for Shipping request
      type: object
      properties:
        orderId:
          description: order identifier
          type: string
        address:
          $ref: '#/components/schemas/Address'
        itemCount:
          description: the number of items in the order
          type: integer
          format: int32
      xml:
        name: ShippingReq

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        name:
          type: string
        surname:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: user status
          format: int32
      xml:
        name: User
    NewOrder:
      description: contains the new order request information
      type: object
      properties:
        customer:
          description: URI that should be used to fetch the customer
          $ref: '#/components/schemas/URI'
        address:
          description: URI that should be used to fetch the address
          $ref: '#/components/schemas/URI'
        card:
          description: URI that should be used to fetch the payment card
          $ref: '#/components/schemas/URI'
        items:
          description: URI that should be used to fetch the items from shopping cart
          $ref: '#/components/schemas/URI'
      xml:
        name: NewOrder
    URI:
      type: object
      xml:
        name: URI
    Authorization:
      type: object
      properties:
        orderId:
          description: order identification
          type: string
        time:
          description: timestamp when this authorization was created
          type: string
          format: date-time
        authorized:
          description: flat that specify whether the payment is authorized
          type: boolean
        message:
          description: approval or rejection message
          type: string
        error:
          description: processing error description
          type: string
      xml:
        name: Authorization
    PaymentReq:
      description: contains the payment request information
      type: object
      properties:
        orderId:
          description: order identifier
          type: string
        customer:
          $ref: '#/components/schemas/CustomerInfoOnCard'
        address:
          $ref: '#/components/schemas/Address'
        card:
          $ref: '#/components/schemas/Card'
        amount:
          description: payment amount
          type: number
          format: double
      xml:
        name: PaymentReq
    CustomerInfoOnCard:
      description: customer information required for payment processing
      type: object
      properties:
        name:
          description: customer name
          type: string
        surname:
          description: customer surname
          type: string
      xml:
        name: CustomerInfoOnCard
    Product:
      description: product information
      type: object
      properties:
        id:
          description: product identifier
          type: string
        name:
          description: product Name
          type: string
        description:
          description: prodcut's description
          type: string
        imageUrl:
          description: product image's URL
          type: string
        price:
          description: product price
          type: number
          format: double
        count:
          description: product count
          type: integer
          format: int32
        tag:
          description: tags associated with the product
          type: array
          uniqueItems: true
          items:
            type: string
